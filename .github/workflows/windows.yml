name: Windows

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  main:
    runs-on: windows-2019
    name: 'Trelis Svalinn Plugin 17.1 Build'


    steps:
      - uses: actions/checkout@v2
        
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Environment Variables
        run: |
          echo "CURRENT=$(pwd)" >> $GITHUB_ENV
          echo "PLUGIN_ABS_PATH=" >> $GITHUB_ENV
          echo "SCRIPTPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PLUGIN_ABS_PATH=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV

      - name: Conda dependencies
        shell:  bash -l {0}
        run: |
          conda install curl eigen
      #     choco install visualstudio2019buildtools

      - name: HDF5 install
        shell:  bash -l {0}
        run: |
          curl -L https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8/hdf5-1.8.21/bin/hdf5-1.8.21-Std-win7_64-vs14.zip --output hdf5-1.8.21-Std-win7_64-vs14.zip
          unzip hdf5-1.8.21-Std-win7_64-vs14.zip
          cd hdf
          msiexec.exe /i HDF5-1.8.21-win64.msi /passive /norestart

      - name: Build MOAB
        shell: bash -l {0}
        run: |
          cd ${PLUGIN_ABS_PATH}
          git clone https://bitbucket.org/bam241/moab -b windows_2
          mkdir moab_build moab_install
          cd moab_build
          cmake ../moab \
                -DENABLE_BLASLAPACK=OFF \
                -DENABLE_FORTRAN=OFF \
                -DENABLE_IMESH=OFF \
                -DENABLE_TESTING=OFF \
                -DENABLE_HDF5=ON \
                -DBUILD_SHARED_LIBS=ON \
                -G"Visual Studio 16 2019"  \
                -DCMAKE_INSTALL_PREFIX=../moab_install/ \
                -DCMAKE_EXE_LINKER_FLAGS="" \
                -DCMAKE_MODULE_LINKER_FLAGS="" \
                -DCMAKE_SHARED_LINKER_FLAGS="" \
                -DCMAKE_STATIC_LINKER_FLAGS="" \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER="C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe" \
                -DCMAKE_CXX_COMPILER="C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe"

          cmake --build . --config Release
          cmake --install . --config Release

#                -DEIGEN3_DIR=/c/Users/mouginot/Desktop/eigen-3.3.8/  \
#                 -DHDF5_hdf5_LIBRARY_RELEASE="C:/Program Files/HDF_Group/HDF5/1.8.21/lib/libhdf5_hl.lib;C:/Program Files/HDF_Group/HDF5/1.8.21/lib/libhdf5.lib;C:/Program Files/HDF_Group/HDF5/1.8.21/lib/libzlib.lib;C:/Program Files/HDF_Group/HDF5/1.8.21/lib/libszip.lib;C:/Program Files/HDF_Group/HDF5/1.8.21/lib/libhdf5_cpp.lib" \



#           make -j`grep -c processor /proc/cpuinfo`
#           make install
#           cd ../..
#           rm -rf moab/moab moab/bld

      # - name: build DAGMC
      #   shell: bash
      #   run: |
      #     cd ${PLUGIN_ABS_PATH}
      #     mkdir -pv DAGMC/bld
      #     cd DAGMC
      #     git clone https://github.com/bam241/DAGMC -b build_exe
      #     cd bld
      #     cmake ../DAGMC -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0 \
      #                 -DMOAB_DIR=${PLUGIN_ABS_PATH}/moab \
      #                 -DBUILD_UWUW=ON \
      #                 -DBUILD_TALLY=OFF \
      #                 -DBUILD_BUILD_OBB=OFF \
      #                 -DBUILD_MAKE_WATERTIGHT=ON \
      #                 -DBUILD_SHARED_LIBS=ON \
      #                 -DBUILD_STATIC_LIBS=OFF \
      #                 -DBUILD_EXE=OFF \
      #                 -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
      #                 -DCMAKE_BUILD_TYPE=Release \
      #                 -DCMAKE_INSTALL_PREFIX=${PLUGIN_ABS_PATH}/DAGMC
      #     make -j`grep -c processor /proc/cpuinfo`
      #     make install
      #     cd ../..
      #     rm -rf DAGMC/DAGMC DAGCM/bld

      # - name: Trelis setup
      #   shell: bash
      #   env:   
      #     TRELIS_DEB_URL: ${{ secrets.LINUX_TRELIS_17 }}
      #     TRELIS_SDK_URL: ${{ secrets.LINUX_TRELIS_SDK_17 }}
      #   run: |
      #     cd ${PLUGIN_ABS_PATH}
      #     echo "$TRELIS_DEB_URL"
      #     curl -L https://uwmadison.box.com/shared/static/${TRELIS_DEB_URL}.deb --output trelis.deb
      #     sudo dpkg -i trelis.deb
      #     cd /opt
      #     curl -L https://uwmadison.box.com/shared/static/${TRELIS_SDK_URL}.gz --output trelis_sdk.tar.gz
      #     sudo tar -zxvf trelis_sdk.tar.gz


      # - name: build plugin
      #   shell: bash
      #   run: |
      #     cd ${PLUGIN_ABS_PATH}
      #     cd Trelis-plugin
      #     git submodule update --init
      #     cd ../
      #     mkdir -pv bld
      #     cd bld
      #     cmake ../Trelis-plugin -DCUBIT_ROOT=/opt/Trelis-17.1 \
      #                           -DDAGMC_DIR=${PLUGIN_ABS_PATH}/DAGMC \
      #                           -DCMAKE_BUILD_TYPE=Release \
      #                           -DCMAKE_INSTALL_PREFIX=${PLUGIN_ABS_PATH}
      #     make -j`grep -c processor /proc/cpuinfo`
      #     make install

      # - name: prepare pkg
      #   shell: bash
      #   run: |
      #     cd ${PLUGIN_ABS_PATH}
      #     mkdir -p pack/bin/plugins/svalinn
      #     cd pack/bin/plugins/svalinn

      #     # Copy all needed libraries into current directory
      #     cp -pPv ${PLUGIN_ABS_PATH}/lib/* .
      #     cp -pPv ${PLUGIN_ABS_PATH}/moab/lib/libMOAB.so* .
      #     cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libdagmc.so* .
      #     cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libmakeWatertight.so* .
      #     cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libpyne_dagmc.so* .
      #     cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libuwuw.so* .
      #     cp -pPv /usr/lib/x86_64-linux-gnu/libhdf5_serial.so* .
      #     chmod 644 *

      #     # Set the RPATH to be the current directory for the DAGMC libraries
      #     patchelf --set-rpath /opt/Trelis-17.1/bin/plugins/svalinn libMOAB.so
      #     patchelf --set-rpath /opt/Trelis-17.1/bin/plugins/svalinn libdagmc.so
      #     patchelf --set-rpath /opt/Trelis-17.1/bin/plugins/svalinn libmakeWatertight.so
      #     patchelf --set-rpath /opt/Trelis-17.1/bin/plugins/svalinn libpyne_dagmc.so
      #     patchelf --set-rpath /opt/Trelis-17.1/bin/plugins/svalinn libuwuw.so

      #     # Create the Svalinn plugin tarball
      #     cd ..
      #     ln -sv svalinn/libsvalinn_plugin.so .
      #     cd ../..
      #     tar --sort=name -czvf svalinn-plugin_linux_17.1.0.tgz bin


      # - name: 'Upload package'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: svalinn-plugin_linux
      #     path: /home/runner/work/Trelis-plugin/pack/svalinn-plugin_linux_17.1.0.tgz

